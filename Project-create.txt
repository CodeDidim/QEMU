param (
    [string]$projectName = "CanBusApp",
    [string]$outputDir = "C:\dev\projects\CANSim"
)

# Define paths
$projectDir = Join-Path -Path $outputDir -ChildPath $projectName
$srcDir = Join-Path -Path $projectDir -ChildPath "src"
$propertiesDir = Join-Path -Path $srcDir -ChildPath "Properties"

# Create directory structure
New-Item -ItemType Directory -Path $projectDir -Force
New-Item -ItemType Directory -Path $srcDir -Force
New-Item -ItemType Directory -Path $propertiesDir -Force

# Create .csproj file
$csprojContent = @"
<Project Sdk=""Microsoft.NET.Sdk.WindowsDesktop"">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net5.0-windows</TargetFramework>
    <UseWPF>false</UseWPF>
    <UseWindowsForms>true</UseWindowsForms>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include=""System"" />
    <Reference Include=""System.Data"" />
    <Reference Include=""System.Drawing"" />
    <Reference Include=""System.Windows.Forms"" />
  </ItemGroup>
</Project>
"@
$csprojPath = Join-Path -Path $srcDir -ChildPath "$projectName.csproj"
Set-Content -Path $csprojPath -Value $csprojContent

# Create Program.cs
$programCsContent = @"
using System;
using System.Windows.Forms;

namespace $projectName
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.SetHighDpiMode(HighDpiMode.SystemAware);
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}
"@
$programCsPath = Join-Path -Path $srcDir -ChildPath "Program.cs"
Set-Content -Path $programCsPath -Value $programCsContent

# Create Form1.Designer.cs
$form1DesignerCsContent = @"
namespace $projectName
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;
        private Button connectButton;
        private TextBox txtNodeId;
        private TextBox txtState;
        private TextBox txtSendCount;
        private TextBox txtReceiveCount;
        private CheckBox chkContinuously;
        private CheckBox chkAuto;
        private Label lblTitle;
        private TableLayoutPanel mainLayout;
        private GroupBox commandsGroup;
        private GroupBox statusGroup;

        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.connectButton = new System.Windows.Forms.Button();
            this.txtNodeId = new System.Windows.Forms.TextBox();
            this.txtState = new System.Windows.Forms.TextBox();
            this.txtSendCount = new System.Windows.Forms.TextBox();
            this.txtReceiveCount = new System.Windows.Forms.TextBox();
            this.chkContinuously = new System.Windows.Forms.CheckBox();
            this.chkAuto = new System.Windows.Forms.CheckBox();
            this.lblTitle = new System.Windows.Forms.Label();
            this.mainLayout = new System.Windows.Forms.TableLayoutPanel();
            this.commandsGroup = new System.Windows.Forms.GroupBox();
            this.statusGroup = new System.Windows.Forms.GroupBox();

            this.SuspendLayout();

            // lblTitle
            this.lblTitle.Font = new System.Drawing.Font(""Segoe UI"", 14F, System.Drawing.FontStyle.Bold);
            this.lblTitle.Dock = System.Windows.Forms.DockStyle.Fill;
            this.lblTitle.Text = ""CAN Bus Communication"";
            this.lblTitle.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;

            // mainLayout
            this.mainLayout.ColumnCount = 5;
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 15F));
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 15F));
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 15F));
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 15F));
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 40F));
            this.mainLayout.Controls.Add(this.lblTitle, 0, 0);
            this.mainLayout.SetColumnSpan(this.lblTitle, 5);
            this.mainLayout.Controls.Add(this.txtNodeId, 0, 1);
            this.mainLayout.Controls.Add(this.txtState, 1, 1);
            this.mainLayout.Controls.Add(this.txtSendCount, 2, 1);
            this.mainLayout.Controls.Add(this.txtReceiveCount, 3, 1);
            this.mainLayout.Controls.Add(this.chkContinuously, 0, 2);
            this.mainLayout.Controls.Add(this.chkAuto, 1, 2);
            this.mainLayout.Controls.Add(this.connectButton, 4, 2);
            this.mainLayout.Controls.Add(this.commandsGroup, 0, 3);
            this.mainLayout.Controls.Add(this.statusGroup, 3, 3);
            this.mainLayout.SetColumnSpan(this.commandsGroup, 3);
            this.mainLayout.SetColumnSpan(this.statusGroup, 2);
            this.mainLayout.Dock = System.Windows.Forms.DockStyle.Fill;
            this.mainLayout.Location = new System.Drawing.Point(0, 0);
            this.mainLayout.Name = ""mainLayout"";
            this.mainLayout.RowCount = 4;
            this.mainLayout.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 40F));
            this.mainLayout.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.mainLayout.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.mainLayout.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.mainLayout.Size = new System.Drawing.Size(800, 450);

            // connectButton
            this.connectButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.connectButton.Location = new System.Drawing.Point(603, 73);
            this.connectButton.Name = ""connectButton"";
            this.connectButton.Size = new System.Drawing.Size(75, 23);
            this.connectButton.TabIndex = 0;
            this.connectButton.Text = ""Connect"";
            this.connectButton.UseVisualStyleBackColor = true;
            this.connectButton.Click += new System.EventHandler(this.connectButton_Click);

            // txtNodeId
            this.txtNodeId.Location = new System.Drawing.Point(3, 43);
            this.txtNodeId.Name = ""txtNodeId"";
            this.txtNodeId.Size = new System.Drawing.Size(100, 20);
            this.txtNodeId.TabIndex = 1;
            this.txtNodeId.PlaceholderText = ""Node ID"";

            // txtState
            this.txtState.Location = new System.Drawing.Point(123, 43);
            this.txtState.Name = ""txtState"";
            this.txtState.Size = new System.Drawing.Size(100, 20);
            this.txtState.TabIndex = 2;
            this.txtState.PlaceholderText = ""State"";

            // txtSendCount
            this.txtSendCount.Location = new System.Drawing.Point(243, 43);
            this.txtSendCount.Name = ""txtSendCount"";
            this.txtSendCount.Size = new System.Drawing.Size(100, 20);
            this.txtSendCount.TabIndex = 3;
            this.txtSendCount.PlaceholderText = ""Send Count"";

            // txtReceiveCount
            this.txtReceiveCount.Location = new System.Drawing.Point(363, 43);
            this.txtReceiveCount.Name = ""txtReceiveCount"";
            this.txtReceiveCount.Size = new System.Drawing.Size(100, 20);
            this.txtReceiveCount.TabIndex = 4;
            this.txtReceiveCount.PlaceholderText = ""Receive Count"";

            // chkContinuously
            this.chkContinuously.Location = new System.Drawing.Point(3, 73);
            this.chkContinuously.Name = ""chkContinuously"";
            this.chkContinuously.Size = new System.Drawing.Size(100, 20);
            this.chkContinuously.TabIndex = 5;
            this.chkContinuously.Text = ""Continuously"";
            this.chkContinuously.UseVisualStyleBackColor = true;
            this.chkContinuously.FlatStyle = System.Windows.Forms.FlatStyle.Flat;

            // chkAuto
            this.chkAuto.Location = new System.Drawing.Point(123, 73);
            this.chkAuto.Name = ""chkAuto"";
            this.chkAuto.Size = new System.Drawing.Size(50, 20);
            this.chkAuto.TabIndex = 6;
            this.chkAuto.Text = ""Auto"";
            this.chkAuto.UseVisualStyleBackColor = true;
            this.chkAuto.FlatStyle = System.Windows.Forms.FlatStyle.Flat;

            // commandsGroup
            this.commandsGroup.Location = new System.Drawing.Point(3, 103);
            this.commandsGroup.Name = ""commandsGroup"";
            this.commandsGroup.Size = new System.Drawing.Size(394, 344);
            this.commandsGroup.Text = ""Commands (Send to device)"";
            this.commandsGroup.Padding = new System.Windows.Forms.Padding(10);

            // statusGroup
            this.statusGroup.Location = new System.Drawing.Point(403, 103);
            this.statusGroup.Name = "statusGroup";
            this.statusGroup.Size = new System.Drawing.Size(394, 344);
            this.statusGroup.Text = "Status (Receive from device)";
            this.statusGroup.Padding = new System.Windows.Forms.Padding(10);

            // Form1
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Controls.Add(this.mainLayout);
            this.Name = "Form1";
            this.Text = "CAN Bus Communication";
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
"@
$form1DesignerCsPath = Join-Path -Path $srcDir -ChildPath "Form1.Designer.cs"
Set-Content -Path $form1DesignerCsPath -Value $form1DesignerCsContent

# Create Form1.cs
$form1CsContent = @"
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using ArcnetDriver;

namespace $projectName
{
    public partial class Form1 : Form
    {
        private CanBusModel model;
        private Dictionary<string, ComboBox> commandComboBoxes = new Dictionary<string, ComboBox>();
        private Dictionary<string, TextBox> statusTextBoxes = new Dictionary<string, TextBox>();

        public Form1()
        {
            InitializeComponent();
            model = ConfigLoader.LoadConfiguration(""commands_config.json"");
            InitializeDynamicComponents();
        }

        private void InitializeDynamicComponents()
        {
            int yPosition = 30;

            // Commands section
            foreach (var command in model.Commands)
            {
                var label = new Label
                {
                    Text = command.Label,
                    Location = new Point(20, yPosition)
                };
                commandsGroup.Controls.Add(label);

                var comboBox = new ComboBox
                {
                    DataSource = command.Options,
                    Location = new Point(150, yPosition),
                    Width = 100,
                    DropDownStyle = ComboBoxStyle.DropDownList // Ensure dropdown style
                };
                commandsGroup.Controls.Add(comboBox);
                commandComboBoxes[command.Label] = comboBox;

                // Set default value if it exists
                if (!string.IsNullOrEmpty(command.DefaultValue) && command.Options.Contains(command.DefaultValue))
                {
                    comboBox.SelectedItem = command.DefaultValue;
                }

                yPosition += 30;
            }

            // Status section
            yPosition = 30;
            foreach (var status in model.Statuses)
            {
                var label = new Label
                {
                    Text = status.Label,
                    Location = new Point(20, yPosition)
                };
                statusGroup.Controls.Add(label);

                var textBox = new TextBox
                {
                    Location = new Point(150, yPosition),
                    Width = 100,
                    Text = status.DefaultValue // Set default value
                };
                statusGroup.Controls.Add(textBox);
                statusTextBoxes[status.Label] = textBox;

                yPosition += 30;
            }
        }

        private void connectButton_Click(object sender, EventArgs e)
        {
            var config = new COM20020_CONFIG
            {
                uiCom20020BaseIOAddress = 0x300,
                byCom20020InterruptLevel = 5,
                byCom20020Timeout = 0x18,
                byCom20020NodeID = byte.Parse(txtNodeId.Text),
                bCom20020_128NAKs = 0,
                bCom20020ReceiveAll = 1,
                byCom20020ClockPrescaler = 3,
                bCom20020SlowArbitration = 0,
                bCom20020ReceiveBroadcasts = 1
            };

            int result = ArcX.Com20020Init(ref config, 0, 0);

            if (result == 0)
            {
                MessageBox.Show(""Initialization successful."", ""Success"", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show($""Initialization failed with error code: {result}"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public string NodeId => txtNodeId.Text;
        public string State => txtState.Text;
        public int SendCount => int.Parse(txtSendCount.Text);
        public int ReceiveCount => int.Parse(txtReceiveCount.Text);
        public bool Continuously => chkContinuously.Checked;
        public bool Auto => chkAuto.Checked;

        public List<Command> GetCommands()
        {
            var commands = new List<Command>();
            foreach (var kvp in commandComboBoxes)
            {
                commands.Add(new Command { Label = kvp.Key, Options = new List<string> { kvp.Value.SelectedItem?.ToString() } });
            }
            return commands;
        }

        public List<Status> GetStatuses()
        {
            var statuses = new List<Status>();
            foreach (var kvp in statusTextBoxes)
            {
                statuses.Add(new Status { Label = kvp.Key, DefaultValue = kvp.Value.Text });
            }
            return statuses;
        }

        public Button ConnectButton => this.connectButton;
    }
}
"@
$form1CsPath = Join-Path -Path $srcDir -ChildPath "Form1.cs"
Set-Content -Path $form1CsPath -Value $form1CsContent

# Create App.config
$appConfigContent = @"
<?xml version=""1.0"" encoding=""utf-8"" ?>
<configuration>
  <startup> 
    <supportedRuntime version=""v4.0"" sku="".NETFramework,Version=v4.8"" />
  </startup>
</configuration>
"@
$appConfigPath = Join-Path -Path $srcDir -ChildPath "App.config"
Set-Content -Path $appConfigPath -Value $appConfigContent

# Create AssemblyInfo.cs
$assemblyInfoCsContent = @"
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: AssemblyTitle(""$projectName"")]
[assembly: AssemblyDescription("""")]
[assembly: AssemblyConfiguration("""")]
[assembly: AssemblyCompany("""")]
[assembly: AssemblyProduct(""$projectName"")]
[assembly: AssemblyCopyright(""Copyright ©  2021"")]
[assembly: AssemblyTrademark("""")]
[assembly: AssemblyCulture("""")]
[assembly: ComVisible(false)]
[assembly: Guid(""d13b85c4-45a8-4c7b-937e-292d04b1b616"")]
[assembly: AssemblyVersion(""1.0.0.0"")]
[assembly: AssemblyFileVersion(""1.0.0.0"")]
"@
$assemblyInfoCsPath = Join-Path -Path $propertiesDir -ChildPath "AssemblyInfo.cs"
Set-Content -Path $assemblyInfoCsPath -Value $assemblyInfoCsContent

# Create ConfigLoader.cs
$configLoaderCsContent = @"
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;

public class Command
{
    public string Label { get; set; }
    public List<string> Options { get; set; }
    public string DefaultValue { get; set; }
}

public class Status
{
    public string Label { get; set; }
    public string DefaultValue { get; set; }
}

public class CanBusModel
{
    public List<Command> Commands { get; set; }
    public List<Status> Statuses { get; set; }
}

public static class ConfigLoader
{
    public static CanBusModel LoadConfiguration(string path)
    {
        if (!File.Exists(path))
        {
            return new CanBusModel
            {
                Commands = new List<Command>(),
                Statuses = new List<Status>()
            };
        }

        var json = File.ReadAllText(path);
        return JsonConvert.DeserializeObject<CanBusModel>(json);
    }
}
"@
$configLoaderCsPath = Join-Path -Path $srcDir -ChildPath "ConfigLoader.cs"
Set-Content -Path $configLoaderCsPath -Value $configLoaderCsContent

# Create commands_config.json
$commandsConfigJsonContent = @"
{
    ""Commands"": [
        {
            ""Label"": ""Command 1"",
            ""Options"": [""enum 1"", ""enum 2"", ""enum 3"", ""enum 4""],
            ""DefaultValue"": ""enum 1""
        },
        {
            ""Label"": ""Command 2"",
            ""Options"": [""enum 1"", ""enum 2"", ""enum 3"", ""enum 4""],
            ""DefaultValue"": ""enum 1""
        },
        {
            ""Label"": ""Command 3"",
            ""Options"": [""enum 1"", ""enum 2"", ""enum 3"", ""enum 4""],
            ""DefaultValue"": ""enum 1""
        },
        {
            ""Label"": ""Command 4"",
            ""Options"": [""enum 1"", ""enum 2"", ""enum 3"", ""enum 4""],
            ""DefaultValue"": ""enum 1""
        },
        {
            ""Label"": ""Command 5"",
            ""Options"": [""enum 1"", ""enum 2"", ""enum 3"", ""enum 4""],
            ""DefaultValue"": ""enum 1""
        }
    ],
    ""Statuses"": [
        {
            ""Label"": ""Status 1"",
            ""DefaultValue"": ""Initial Status 1""
        },
        {
            ""Label"": ""Status 2"",
            ""DefaultValue"": ""Initial Status 2""
        },
        {
            ""Label"": ""Status 3"",
            ""DefaultValue"": ""Initial Status 3""
        },
        {
            ""Label"": ""Status 4"",
            ""DefaultValue"": ""Initial Status 4""
        },
        {
            ""Label"": ""Status 5"",
            ""DefaultValue"": ""Initial Status 5""
        }
    ]
}
"@
$commandsConfigJsonPath = Join-Path -Path $projectDir -ChildPath "commands_config.json"
Set-Content -Path $commandsConfigJsonPath -Value $commandsConfigJsonContent

# Create ArcX.cs for P/Invoke
$arcXCsContent = @"
using System;
using System.Runtime.InteropServices;

namespace ArcnetDriver
{
    // Define the COM20020_CONFIG structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct COM20020_CONFIG
    {
        public ushort uiCom20020BaseIOAddress;
        public byte byCom20020InterruptLevel;
        public byte byCom20020Timeout;
        public byte byCom20020NodeID;
        public byte bCom20020_128NAKs;
        public byte bCom20020ReceiveAll;
        public byte byCom20020ClockPrescaler;
        public byte bCom20020SlowArbitration;
        public byte bCom20020ReceiveBroadcasts;
    }

    // Define the COM20020_TRANSMIT_BUFFER structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct COM20020_TRANSMIT_BUFFER
    {
        public byte byDestinationNodeID;
        public ushort uiNumberOfBytes;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 508)]
        public byte[] byDataBuffer;
    }

    // Define the COM20020_RECEIVE_BUFFER structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct COM20020_RECEIVE_BUFFER
    {
        public byte bySourceNodeID;
        public byte byDestinationNodeID;
        public ushort uiNumberOfBytes;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 508)]
        public byte[] byDataBuffer;
        public uint dwNumberOfFilledBuffers;
    }

    // Define the COM20020_STATUS structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct COM20020_STATUS
    {
        public byte bReceiveActivity;
        public byte bPowerOnReset;
        public byte bRecon;
        public byte bToken;
        public uint dwReceivedMessages;
        public byte bTransmissionComplete;
        public byte bTransmissionAcknowledged;
        public byte bExcessiveNAKs;
        public uint dwReserved;
    }

    // Define the COM20020_REGISTER structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct COM20020_REGISTER
    {
        public byte bWrite;
        public byte byRegister;
        public byte byValue;
    }

    public static class ArcX
    {
        private const string DLL_NAME = "ArcX.dll";

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Init(ref COM20020_CONFIG cfg, byte deviceNumber, byte hardwareType);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Register(ref COM20020_REGISTER reg);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Status(ref COM20020_STATUS status);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020CancelTX();

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020FlushRX();

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Transmit(ref COM20020_TRANSMIT_BUFFER txbuf);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Receive(ref COM20020_RECEIVE_BUFFER rxbuf);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020WakeOnReceive(IntPtr receiveEvent);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020ResetWakeOnReceive();

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020WakeOnTXComplete(IntPtr transmitEvent);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020ResetWakeOnTXComplete();

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020WakeOnRecon(IntPtr reconEvent);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020ResetWakeOnRecon();

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020GetOverflowTotal(ref long packets, ref long data);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020GetFirmwareRevision(ref short rev);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020UsbVersion(ref short version);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Exit();
    }
}
"@
$arcXCsPath = Join-Path -Path $srcDir -ChildPath "ArcX.cs"
Set-Content -Path $arcXCsPath -Value $arcXCsContent

# Create Solution file
$solutionContent = @"
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.2.32616.157
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "$projectName", "src\$projectName.csproj", "{B2C8458E-6C2E-4E77-908A-BD1A9CC50C52}"
EndProject
Global
    GlobalSection(SolutionConfigurationPlatforms) = preSolution
        Debug|Any CPU = Debug|Any CPU
        Release|Any CPU = Release|Any CPU
    EndGlobalSection
    GlobalSection(ProjectConfigurationPlatforms) = postSolution
        {B2C8458E-6C2E-4E77-908A-BD1A9CC50C52}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
        {B2C8458E-6C2E-4E77-908A-BD1A9CC50C52}.Debug|Any CPU.Build.0 = Debug|Any CPU
        {B2C8458E-6C2E-4E77-908A-BD1A9CC50C52}.Release|Any CPU.ActiveCfg = Release|Any CPU
        {B2C8458E-6C2E-4E77-908A-BD1A9CC50C52}.Release|Any CPU.Build.0 = Release|Any CPU
    EndGlobalSection
EndGlobal
"@
$solutionPath = Join-Path -Path $projectDir -ChildPath "$projectName.sln"
Set-Content -Path $solutionPath -Value $solutionContent

# Final message
Write-Host "Project structure created successfully at $projectDir"