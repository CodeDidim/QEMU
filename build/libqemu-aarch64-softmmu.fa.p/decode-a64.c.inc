/* This file is autogenerated by scripts/decodetree.py.  */

typedef struct {
    int rd;
    int rn;
    int sf;
    int immr;
    int imms;
} arg_bitfield;

typedef struct {
    int rn;
    int rm;
    int m;
} arg_bra;

typedef struct {
    int rn;
    int m;
} arg_braz;

typedef struct {
    int rt;
    int imm;
    int sf;
    int nz;
} arg_cbz;

typedef struct {
    int cond;
    int imm;
} arg_disas_a6411;

typedef struct {
} arg_disas_a6415;

typedef struct {
    int domain;
    int types;
} arg_disas_a6416;

typedef struct {
    int mask;
    int imm;
} arg_disas_a6417;

typedef struct {
    int l;
    int op1;
    int crn;
    int crm;
    int op2;
    int rt;
    int op0;
} arg_disas_a6418;

typedef struct {
    int rd;
    int rn;
    int rm;
    int imm;
    int sf;
} arg_extract;

typedef struct {
    int imm;
} arg_i;

typedef struct {
    int rd;
    int sf;
    int imm;
    int hw;
} arg_movw;

typedef struct {
    int rn;
} arg_r;

typedef struct {
    int m;
} arg_reta;

typedef struct {
    int rd;
    int imm;
} arg_ri;

typedef struct {
    int rd;
    int rn;
    int sf;
    int dbm;
} arg_rri_log;

typedef struct {
    int rd;
    int rn;
    int imm;
    int sf;
} arg_rri_sf;

typedef struct {
    int rd;
    int rn;
    int uimm6;
    int uimm4;
} arg_rri_tag;

typedef struct {
    int rt;
    int imm;
    int nz;
    int bitpos;
} arg_tbz;

typedef arg_ri arg_ADR;
static bool trans_ADR(DisasContext *ctx, arg_ADR *a);
typedef arg_ri arg_ADRP;
static bool trans_ADRP(DisasContext *ctx, arg_ADRP *a);
typedef arg_rri_sf arg_ADD_i;
static bool trans_ADD_i(DisasContext *ctx, arg_ADD_i *a);
typedef arg_rri_sf arg_ADDS_i;
static bool trans_ADDS_i(DisasContext *ctx, arg_ADDS_i *a);
typedef arg_rri_sf arg_SUB_i;
static bool trans_SUB_i(DisasContext *ctx, arg_SUB_i *a);
typedef arg_rri_sf arg_SUBS_i;
static bool trans_SUBS_i(DisasContext *ctx, arg_SUBS_i *a);
typedef arg_rri_tag arg_ADDG_i;
static bool trans_ADDG_i(DisasContext *ctx, arg_ADDG_i *a);
typedef arg_rri_tag arg_SUBG_i;
static bool trans_SUBG_i(DisasContext *ctx, arg_SUBG_i *a);
typedef arg_rri_log arg_AND_i;
static bool trans_AND_i(DisasContext *ctx, arg_AND_i *a);
typedef arg_rri_log arg_ORR_i;
static bool trans_ORR_i(DisasContext *ctx, arg_ORR_i *a);
typedef arg_rri_log arg_EOR_i;
static bool trans_EOR_i(DisasContext *ctx, arg_EOR_i *a);
typedef arg_rri_log arg_ANDS_i;
static bool trans_ANDS_i(DisasContext *ctx, arg_ANDS_i *a);
typedef arg_movw arg_MOVN;
static bool trans_MOVN(DisasContext *ctx, arg_MOVN *a);
typedef arg_movw arg_MOVZ;
static bool trans_MOVZ(DisasContext *ctx, arg_MOVZ *a);
typedef arg_movw arg_MOVK;
static bool trans_MOVK(DisasContext *ctx, arg_MOVK *a);
typedef arg_bitfield arg_SBFM;
static bool trans_SBFM(DisasContext *ctx, arg_SBFM *a);
typedef arg_bitfield arg_BFM;
static bool trans_BFM(DisasContext *ctx, arg_BFM *a);
typedef arg_bitfield arg_UBFM;
static bool trans_UBFM(DisasContext *ctx, arg_UBFM *a);
typedef arg_extract arg_EXTR;
static bool trans_EXTR(DisasContext *ctx, arg_EXTR *a);
typedef arg_i arg_B;
static bool trans_B(DisasContext *ctx, arg_B *a);
typedef arg_i arg_BL;
static bool trans_BL(DisasContext *ctx, arg_BL *a);
typedef arg_cbz arg_CBZ;
static bool trans_CBZ(DisasContext *ctx, arg_CBZ *a);
typedef arg_tbz arg_TBZ;
static bool trans_TBZ(DisasContext *ctx, arg_TBZ *a);
typedef arg_disas_a6411 arg_B_cond;
static bool trans_B_cond(DisasContext *ctx, arg_B_cond *a);
typedef arg_r arg_BR;
static bool trans_BR(DisasContext *ctx, arg_BR *a);
typedef arg_r arg_BLR;
static bool trans_BLR(DisasContext *ctx, arg_BLR *a);
typedef arg_r arg_RET;
static bool trans_RET(DisasContext *ctx, arg_RET *a);
typedef arg_braz arg_BRAZ;
static bool trans_BRAZ(DisasContext *ctx, arg_BRAZ *a);
typedef arg_braz arg_BLRAZ;
static bool trans_BLRAZ(DisasContext *ctx, arg_BLRAZ *a);
typedef arg_reta arg_RETA;
static bool trans_RETA(DisasContext *ctx, arg_RETA *a);
typedef arg_bra arg_BRA;
static bool trans_BRA(DisasContext *ctx, arg_BRA *a);
typedef arg_bra arg_BLRA;
static bool trans_BLRA(DisasContext *ctx, arg_BLRA *a);
typedef arg_disas_a6415 arg_ERET;
static bool trans_ERET(DisasContext *ctx, arg_ERET *a);
typedef arg_reta arg_ERETA;
static bool trans_ERETA(DisasContext *ctx, arg_ERETA *a);
typedef arg_disas_a6415 arg_YIELD;
static bool trans_YIELD(DisasContext *ctx, arg_YIELD *a);
typedef arg_disas_a6415 arg_WFE;
static bool trans_WFE(DisasContext *ctx, arg_WFE *a);
typedef arg_disas_a6415 arg_WFI;
static bool trans_WFI(DisasContext *ctx, arg_WFI *a);
typedef arg_disas_a6415 arg_XPACLRI;
static bool trans_XPACLRI(DisasContext *ctx, arg_XPACLRI *a);
typedef arg_disas_a6415 arg_PACIA1716;
static bool trans_PACIA1716(DisasContext *ctx, arg_PACIA1716 *a);
typedef arg_disas_a6415 arg_PACIB1716;
static bool trans_PACIB1716(DisasContext *ctx, arg_PACIB1716 *a);
typedef arg_disas_a6415 arg_AUTIA1716;
static bool trans_AUTIA1716(DisasContext *ctx, arg_AUTIA1716 *a);
typedef arg_disas_a6415 arg_AUTIB1716;
static bool trans_AUTIB1716(DisasContext *ctx, arg_AUTIB1716 *a);
typedef arg_disas_a6415 arg_ESB;
static bool trans_ESB(DisasContext *ctx, arg_ESB *a);
typedef arg_disas_a6415 arg_PACIAZ;
static bool trans_PACIAZ(DisasContext *ctx, arg_PACIAZ *a);
typedef arg_disas_a6415 arg_PACIASP;
static bool trans_PACIASP(DisasContext *ctx, arg_PACIASP *a);
typedef arg_disas_a6415 arg_PACIBZ;
static bool trans_PACIBZ(DisasContext *ctx, arg_PACIBZ *a);
typedef arg_disas_a6415 arg_PACIBSP;
static bool trans_PACIBSP(DisasContext *ctx, arg_PACIBSP *a);
typedef arg_disas_a6415 arg_AUTIAZ;
static bool trans_AUTIAZ(DisasContext *ctx, arg_AUTIAZ *a);
typedef arg_disas_a6415 arg_AUTIASP;
static bool trans_AUTIASP(DisasContext *ctx, arg_AUTIASP *a);
typedef arg_disas_a6415 arg_AUTIBZ;
static bool trans_AUTIBZ(DisasContext *ctx, arg_AUTIBZ *a);
typedef arg_disas_a6415 arg_AUTIBSP;
static bool trans_AUTIBSP(DisasContext *ctx, arg_AUTIBSP *a);
typedef arg_disas_a6415 arg_NOP;
static bool trans_NOP(DisasContext *ctx, arg_NOP *a);
typedef arg_disas_a6415 arg_CLREX;
static bool trans_CLREX(DisasContext *ctx, arg_CLREX *a);
typedef arg_disas_a6416 arg_DSB_DMB;
static bool trans_DSB_DMB(DisasContext *ctx, arg_DSB_DMB *a);
typedef arg_disas_a6415 arg_ISB;
static bool trans_ISB(DisasContext *ctx, arg_ISB *a);
typedef arg_disas_a6415 arg_SB;
static bool trans_SB(DisasContext *ctx, arg_SB *a);
typedef arg_disas_a6415 arg_CFINV;
static bool trans_CFINV(DisasContext *ctx, arg_CFINV *a);
typedef arg_disas_a6415 arg_XAFLAG;
static bool trans_XAFLAG(DisasContext *ctx, arg_XAFLAG *a);
typedef arg_disas_a6415 arg_AXFLAG;
static bool trans_AXFLAG(DisasContext *ctx, arg_AXFLAG *a);
typedef arg_i arg_MSR_i_UAO;
static bool trans_MSR_i_UAO(DisasContext *ctx, arg_MSR_i_UAO *a);
typedef arg_i arg_MSR_i_PAN;
static bool trans_MSR_i_PAN(DisasContext *ctx, arg_MSR_i_PAN *a);
typedef arg_i arg_MSR_i_SPSEL;
static bool trans_MSR_i_SPSEL(DisasContext *ctx, arg_MSR_i_SPSEL *a);
typedef arg_i arg_MSR_i_SBSS;
static bool trans_MSR_i_SBSS(DisasContext *ctx, arg_MSR_i_SBSS *a);
typedef arg_i arg_MSR_i_DIT;
static bool trans_MSR_i_DIT(DisasContext *ctx, arg_MSR_i_DIT *a);
typedef arg_i arg_MSR_i_TCO;
static bool trans_MSR_i_TCO(DisasContext *ctx, arg_MSR_i_TCO *a);
typedef arg_i arg_MSR_i_DAIFSET;
static bool trans_MSR_i_DAIFSET(DisasContext *ctx, arg_MSR_i_DAIFSET *a);
typedef arg_i arg_MSR_i_DAIFCLEAR;
static bool trans_MSR_i_DAIFCLEAR(DisasContext *ctx, arg_MSR_i_DAIFCLEAR *a);
typedef arg_disas_a6417 arg_MSR_i_SVCR;
static bool trans_MSR_i_SVCR(DisasContext *ctx, arg_MSR_i_SVCR *a);
typedef arg_disas_a6418 arg_SYS;
static bool trans_SYS(DisasContext *ctx, arg_SYS *a);
typedef arg_i arg_SVC;
static bool trans_SVC(DisasContext *ctx, arg_SVC *a);
typedef arg_i arg_HVC;
static bool trans_HVC(DisasContext *ctx, arg_HVC *a);
typedef arg_i arg_SMC;
static bool trans_SMC(DisasContext *ctx, arg_SMC *a);
typedef arg_i arg_BRK;
static bool trans_BRK(DisasContext *ctx, arg_BRK *a);
typedef arg_i arg_HLT;
static bool trans_HLT(DisasContext *ctx, arg_HLT *a);

static void disas_a64_extract_addsub_imm(DisasContext *ctx, arg_rri_sf *a, uint32_t insn)
{
    a->imm = extract32(insn, 10, 12);
    a->rn = extract32(insn, 5, 5);
    a->sf = extract32(insn, 31, 1);
    a->rd = extract32(insn, 0, 5);
}

static void disas_a64_extract_addsub_imm12(DisasContext *ctx, arg_rri_sf *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
    a->imm = shl_12(ctx, extract32(insn, 10, 12));
    a->sf = extract32(insn, 31, 1);
    a->rd = extract32(insn, 0, 5);
}

static void disas_a64_extract_addsub_imm_tag(DisasContext *ctx, arg_rri_tag *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
    a->uimm4 = extract32(insn, 10, 4);
    a->uimm6 = extract32(insn, 16, 6);
}

static void disas_a64_extract_bitfield_32(DisasContext *ctx, arg_bitfield *a, uint32_t insn)
{
    a->sf = 0;
    a->rn = extract32(insn, 5, 5);
    a->immr = extract32(insn, 16, 5);
    a->rd = extract32(insn, 0, 5);
    a->imms = extract32(insn, 10, 5);
}

static void disas_a64_extract_bitfield_64(DisasContext *ctx, arg_bitfield *a, uint32_t insn)
{
    a->sf = 1;
    a->rn = extract32(insn, 5, 5);
    a->immr = extract32(insn, 16, 6);
    a->rd = extract32(insn, 0, 5);
    a->imms = extract32(insn, 10, 6);
}

static void disas_a64_extract_branch(DisasContext *ctx, arg_i *a, uint32_t insn)
{
    a->imm = times_4(ctx, sextract32(insn, 0, 26));
}

static void disas_a64_extract_disas_a64_Fmt_10(DisasContext *ctx, arg_extract *a, uint32_t insn)
{
    a->imm = extract32(insn, 10, 6);
    a->sf = 1;
    a->rn = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
    a->rm = extract32(insn, 16, 5);
}

static void disas_a64_extract_disas_a64_Fmt_11(DisasContext *ctx, arg_extract *a, uint32_t insn)
{
    a->imm = extract32(insn, 10, 5);
    a->sf = 0;
    a->rn = extract32(insn, 5, 5);
    a->rd = extract32(insn, 0, 5);
    a->rm = extract32(insn, 16, 5);
}

static void disas_a64_extract_disas_a64_Fmt_13(DisasContext *ctx, arg_cbz *a, uint32_t insn)
{
    a->imm = times_4(ctx, sextract32(insn, 5, 19));
    a->rt = extract32(insn, 0, 5);
    a->sf = extract32(insn, 31, 1);
    a->nz = extract32(insn, 24, 1);
}

static void disas_a64_extract_disas_a64_Fmt_14(DisasContext *ctx, arg_tbz *a, uint32_t insn)
{
    a->imm = times_4(ctx, sextract32(insn, 5, 14));
    a->bitpos = deposit32(extract32(insn, 19, 5), 5, 27, extract32(insn, 31, 1));
    a->rt = extract32(insn, 0, 5);
    a->nz = extract32(insn, 24, 1);
}

static void disas_a64_extract_disas_a64_Fmt_15(DisasContext *ctx, arg_disas_a6411 *a, uint32_t insn)
{
    a->imm = times_4(ctx, sextract32(insn, 5, 19));
    a->cond = extract32(insn, 0, 4);
}

static void disas_a64_extract_disas_a64_Fmt_16(DisasContext *ctx, arg_r *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
}

static void disas_a64_extract_disas_a64_Fmt_17(DisasContext *ctx, arg_braz *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
    a->m = extract32(insn, 10, 1);
}

static void disas_a64_extract_disas_a64_Fmt_18(DisasContext *ctx, arg_reta *a, uint32_t insn)
{
    a->m = extract32(insn, 10, 1);
}

static void disas_a64_extract_disas_a64_Fmt_19(DisasContext *ctx, arg_bra *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
    a->rm = extract32(insn, 0, 5);
    a->m = extract32(insn, 10, 1);
}

static void disas_a64_extract_disas_a64_Fmt_20(DisasContext *ctx, arg_disas_a6415 *a, uint32_t insn)
{
}

static void disas_a64_extract_disas_a64_Fmt_21(DisasContext *ctx, arg_disas_a6416 *a, uint32_t insn)
{
    a->types = extract32(insn, 8, 2);
    a->domain = extract32(insn, 10, 2);
}

static void disas_a64_extract_disas_a64_Fmt_23(DisasContext *ctx, arg_disas_a6417 *a, uint32_t insn)
{
    a->imm = extract32(insn, 8, 1);
    a->mask = extract32(insn, 9, 2);
}

static void disas_a64_extract_disas_a64_Fmt_24(DisasContext *ctx, arg_disas_a6418 *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->op1 = extract32(insn, 16, 3);
    a->op2 = extract32(insn, 5, 3);
    a->crm = extract32(insn, 8, 4);
    a->l = extract32(insn, 21, 1);
    a->op0 = 1;
    a->crn = extract32(insn, 12, 4);
}

static void disas_a64_extract_disas_a64_Fmt_25(DisasContext *ctx, arg_disas_a6418 *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->op1 = extract32(insn, 16, 3);
    a->op2 = extract32(insn, 5, 3);
    a->crm = extract32(insn, 8, 4);
    a->l = extract32(insn, 21, 1);
    a->op0 = 2;
    a->crn = extract32(insn, 12, 4);
}

static void disas_a64_extract_disas_a64_Fmt_26(DisasContext *ctx, arg_disas_a6418 *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->op1 = extract32(insn, 16, 3);
    a->op2 = extract32(insn, 5, 3);
    a->crm = extract32(insn, 8, 4);
    a->l = extract32(insn, 21, 1);
    a->op0 = 3;
    a->crn = extract32(insn, 12, 4);
}

static void disas_a64_extract_i16(DisasContext *ctx, arg_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 5, 16);
}

static void disas_a64_extract_logic_imm_32(DisasContext *ctx, arg_rri_log *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
    a->sf = 0;
    a->rd = extract32(insn, 0, 5);
    a->dbm = extract32(insn, 10, 12);
}

static void disas_a64_extract_logic_imm_64(DisasContext *ctx, arg_rri_log *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
    a->sf = 1;
    a->rd = extract32(insn, 0, 5);
    a->dbm = extract32(insn, 10, 13);
}

static void disas_a64_extract_movw_32(DisasContext *ctx, arg_movw *a, uint32_t insn)
{
    a->hw = extract32(insn, 21, 1);
    a->imm = extract32(insn, 5, 16);
    a->sf = 0;
    a->rd = extract32(insn, 0, 5);
}

static void disas_a64_extract_movw_64(DisasContext *ctx, arg_movw *a, uint32_t insn)
{
    a->hw = extract32(insn, 21, 2);
    a->imm = extract32(insn, 5, 16);
    a->sf = 1;
    a->rd = extract32(insn, 0, 5);
}

static void disas_a64_extract_msr_i(DisasContext *ctx, arg_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 8, 4);
}

static void disas_a64_extract_pcrel(DisasContext *ctx, arg_ri *a, uint32_t insn)
{
    a->imm = deposit32(extract32(insn, 29, 2), 2, 30, sextract32(insn, 5, 19));
    a->rd = extract32(insn, 0, 5);
}

static bool disas_a64(DisasContext *ctx, uint32_t insn)
{
    union {
        arg_bitfield f_bitfield;
        arg_bra f_bra;
        arg_braz f_braz;
        arg_cbz f_cbz;
        arg_disas_a6411 f_disas_a6411;
        arg_disas_a6415 f_disas_a6415;
        arg_disas_a6416 f_disas_a6416;
        arg_disas_a6417 f_disas_a6417;
        arg_disas_a6418 f_disas_a6418;
        arg_extract f_extract;
        arg_i f_i;
        arg_movw f_movw;
        arg_r f_r;
        arg_reta f_reta;
        arg_ri f_ri;
        arg_rri_log f_rri_log;
        arg_rri_sf f_rri_sf;
        arg_rri_tag f_rri_tag;
        arg_tbz f_tbz;
    } u;

    switch ((insn >> 26) & 0x7) {
    case 0x4:
        /* ...100.. ........ ........ ........ */
        switch ((insn >> 24) & 0x3) {
        case 0x0:
            /* ...10000 ........ ........ ........ */
            disas_a64_extract_pcrel(ctx, &u.f_ri, insn);
            switch ((insn >> 31) & 0x1) {
            case 0x0:
                /* 0..10000 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:35 */
                if (trans_ADR(ctx, &u.f_ri)) return true;
                break;
            case 0x1:
                /* 1..10000 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:36 */
                if (trans_ADRP(ctx, &u.f_ri)) return true;
                break;
            }
            break;
        case 0x1:
            /* ...10001 ........ ........ ........ */
            switch (insn & 0x60c00000) {
            case 0x00000000:
                /* .0010001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:44 */
                disas_a64_extract_addsub_imm(ctx, &u.f_rri_sf, insn);
                if (trans_ADD_i(ctx, &u.f_rri_sf)) return true;
                break;
            case 0x00400000:
                /* .0010001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:45 */
                disas_a64_extract_addsub_imm12(ctx, &u.f_rri_sf, insn);
                if (trans_ADD_i(ctx, &u.f_rri_sf)) return true;
                break;
            case 0x00800000:
                /* .0010001 10...... ........ ........ */
                disas_a64_extract_addsub_imm_tag(ctx, &u.f_rri_tag, insn);
                switch (insn & 0x8000c000u) {
                case 0x80000000u:
                    /* 10010001 10...... 00...... ........ */
                    /* ../target/arm/tcg/a64.decode:59 */
                    if (trans_ADDG_i(ctx, &u.f_rri_tag)) return true;
                    break;
                }
                break;
            case 0x20000000:
                /* .0110001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:46 */
                disas_a64_extract_addsub_imm(ctx, &u.f_rri_sf, insn);
                if (trans_ADDS_i(ctx, &u.f_rri_sf)) return true;
                break;
            case 0x20400000:
                /* .0110001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:47 */
                disas_a64_extract_addsub_imm12(ctx, &u.f_rri_sf, insn);
                if (trans_ADDS_i(ctx, &u.f_rri_sf)) return true;
                break;
            case 0x40000000:
                /* .1010001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:49 */
                disas_a64_extract_addsub_imm(ctx, &u.f_rri_sf, insn);
                if (trans_SUB_i(ctx, &u.f_rri_sf)) return true;
                break;
            case 0x40400000:
                /* .1010001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:50 */
                disas_a64_extract_addsub_imm12(ctx, &u.f_rri_sf, insn);
                if (trans_SUB_i(ctx, &u.f_rri_sf)) return true;
                break;
            case 0x40800000:
                /* .1010001 10...... ........ ........ */
                disas_a64_extract_addsub_imm_tag(ctx, &u.f_rri_tag, insn);
                switch (insn & 0x8000c000u) {
                case 0x80000000u:
                    /* 11010001 10...... 00...... ........ */
                    /* ../target/arm/tcg/a64.decode:60 */
                    if (trans_SUBG_i(ctx, &u.f_rri_tag)) return true;
                    break;
                }
                break;
            case 0x60000000:
                /* .1110001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:51 */
                disas_a64_extract_addsub_imm(ctx, &u.f_rri_sf, insn);
                if (trans_SUBS_i(ctx, &u.f_rri_sf)) return true;
                break;
            case 0x60400000:
                /* .1110001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:52 */
                disas_a64_extract_addsub_imm12(ctx, &u.f_rri_sf, insn);
                if (trans_SUBS_i(ctx, &u.f_rri_sf)) return true;
                break;
            }
            break;
        case 0x2:
            /* ...10010 ........ ........ ........ */
            switch (insn & 0xe0800000u) {
            case 0x00000000:
                /* 00010010 0....... ........ ........ */
                disas_a64_extract_logic_imm_32(ctx, &u.f_rri_log, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 00010010 00...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:69 */
                    if (trans_AND_i(ctx, &u.f_rri_log)) return true;
                    break;
                }
                break;
            case 0x00800000:
                /* 00010010 1....... ........ ........ */
                disas_a64_extract_movw_32(ctx, &u.f_movw, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 00010010 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:84 */
                    if (trans_MOVN(ctx, &u.f_movw)) return true;
                    break;
                }
                break;
            case 0x20000000:
                /* 00110010 0....... ........ ........ */
                disas_a64_extract_logic_imm_32(ctx, &u.f_rri_log, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 00110010 00...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:71 */
                    if (trans_ORR_i(ctx, &u.f_rri_log)) return true;
                    break;
                }
                break;
            case 0x40000000:
                /* 01010010 0....... ........ ........ */
                disas_a64_extract_logic_imm_32(ctx, &u.f_rri_log, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 01010010 00...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:73 */
                    if (trans_EOR_i(ctx, &u.f_rri_log)) return true;
                    break;
                }
                break;
            case 0x40800000:
                /* 01010010 1....... ........ ........ */
                disas_a64_extract_movw_32(ctx, &u.f_movw, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 01010010 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:86 */
                    if (trans_MOVZ(ctx, &u.f_movw)) return true;
                    break;
                }
                break;
            case 0x60000000:
                /* 01110010 0....... ........ ........ */
                disas_a64_extract_logic_imm_32(ctx, &u.f_rri_log, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 01110010 00...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:75 */
                    if (trans_ANDS_i(ctx, &u.f_rri_log)) return true;
                    break;
                }
                break;
            case 0x60800000:
                /* 01110010 1....... ........ ........ */
                disas_a64_extract_movw_32(ctx, &u.f_movw, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 01110010 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:88 */
                    if (trans_MOVK(ctx, &u.f_movw)) return true;
                    break;
                }
                break;
            case 0x80000000u:
                /* 10010010 0....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:68 */
                disas_a64_extract_logic_imm_64(ctx, &u.f_rri_log, insn);
                if (trans_AND_i(ctx, &u.f_rri_log)) return true;
                break;
            case 0x80800000u:
                /* 10010010 1....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:83 */
                disas_a64_extract_movw_64(ctx, &u.f_movw, insn);
                if (trans_MOVN(ctx, &u.f_movw)) return true;
                break;
            case 0xa0000000u:
                /* 10110010 0....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:70 */
                disas_a64_extract_logic_imm_64(ctx, &u.f_rri_log, insn);
                if (trans_ORR_i(ctx, &u.f_rri_log)) return true;
                break;
            case 0xc0000000u:
                /* 11010010 0....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:72 */
                disas_a64_extract_logic_imm_64(ctx, &u.f_rri_log, insn);
                if (trans_EOR_i(ctx, &u.f_rri_log)) return true;
                break;
            case 0xc0800000u:
                /* 11010010 1....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:85 */
                disas_a64_extract_movw_64(ctx, &u.f_movw, insn);
                if (trans_MOVZ(ctx, &u.f_movw)) return true;
                break;
            case 0xe0000000u:
                /* 11110010 0....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:74 */
                disas_a64_extract_logic_imm_64(ctx, &u.f_rri_log, insn);
                if (trans_ANDS_i(ctx, &u.f_rri_log)) return true;
                break;
            case 0xe0800000u:
                /* 11110010 1....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:87 */
                disas_a64_extract_movw_64(ctx, &u.f_movw, insn);
                if (trans_MOVK(ctx, &u.f_movw)) return true;
                break;
            }
            break;
        case 0x3:
            /* ...10011 ........ ........ ........ */
            switch (insn & 0xe0c00000u) {
            case 0x00000000:
                /* 00010011 00...... ........ ........ */
                disas_a64_extract_bitfield_32(ctx, &u.f_bitfield, insn);
                switch (insn & 0x00208000) {
                case 0x00000000:
                    /* 00010011 000..... 0....... ........ */
                    /* ../target/arm/tcg/a64.decode:97 */
                    if (trans_SBFM(ctx, &u.f_bitfield)) return true;
                    break;
                }
                break;
            case 0x00800000:
                /* 00010011 10...... ........ ........ */
                disas_a64_extract_disas_a64_Fmt_11(ctx, &u.f_extract, insn);
                switch (insn & 0x00208000) {
                case 0x00000000:
                    /* 00010011 100..... 0....... ........ */
                    /* ../target/arm/tcg/a64.decode:108 */
                    if (trans_EXTR(ctx, &u.f_extract)) return true;
                    break;
                }
                break;
            case 0x20000000:
                /* 00110011 00...... ........ ........ */
                disas_a64_extract_bitfield_32(ctx, &u.f_bitfield, insn);
                switch (insn & 0x00208000) {
                case 0x00000000:
                    /* 00110011 000..... 0....... ........ */
                    /* ../target/arm/tcg/a64.decode:99 */
                    if (trans_BFM(ctx, &u.f_bitfield)) return true;
                    break;
                }
                break;
            case 0x40000000:
                /* 01010011 00...... ........ ........ */
                disas_a64_extract_bitfield_32(ctx, &u.f_bitfield, insn);
                switch (insn & 0x00208000) {
                case 0x00000000:
                    /* 01010011 000..... 0....... ........ */
                    /* ../target/arm/tcg/a64.decode:101 */
                    if (trans_UBFM(ctx, &u.f_bitfield)) return true;
                    break;
                }
                break;
            case 0x80400000u:
                /* 10010011 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:96 */
                disas_a64_extract_bitfield_64(ctx, &u.f_bitfield, insn);
                if (trans_SBFM(ctx, &u.f_bitfield)) return true;
                break;
            case 0x80c00000u:
                /* 10010011 11...... ........ ........ */
                disas_a64_extract_disas_a64_Fmt_10(ctx, &u.f_extract, insn);
                switch ((insn >> 21) & 0x1) {
                case 0x0:
                    /* 10010011 110..... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:107 */
                    if (trans_EXTR(ctx, &u.f_extract)) return true;
                    break;
                }
                break;
            case 0xa0400000u:
                /* 10110011 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:98 */
                disas_a64_extract_bitfield_64(ctx, &u.f_bitfield, insn);
                if (trans_BFM(ctx, &u.f_bitfield)) return true;
                break;
            case 0xc0400000u:
                /* 11010011 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:100 */
                disas_a64_extract_bitfield_64(ctx, &u.f_bitfield, insn);
                if (trans_UBFM(ctx, &u.f_bitfield)) return true;
                break;
            }
            break;
        }
        break;
    case 0x5:
        /* ...101.. ........ ........ ........ */
        switch ((insn >> 29) & 0x3) {
        case 0x0:
            /* .00101.. ........ ........ ........ */
            disas_a64_extract_branch(ctx, &u.f_i, insn);
            switch ((insn >> 31) & 0x1) {
            case 0x0:
                /* 000101.. ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:115 */
                if (trans_B(ctx, &u.f_i)) return true;
                break;
            case 0x1:
                /* 100101.. ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:116 */
                if (trans_BL(ctx, &u.f_i)) return true;
                break;
            }
            break;
        case 0x1:
            /* .01101.. ........ ........ ........ */
            switch ((insn >> 25) & 0x1) {
            case 0x0:
                /* .011010. ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:121 */
                disas_a64_extract_disas_a64_Fmt_13(ctx, &u.f_cbz, insn);
                if (trans_CBZ(ctx, &u.f_cbz)) return true;
                break;
            case 0x1:
                /* .011011. ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:127 */
                disas_a64_extract_disas_a64_Fmt_14(ctx, &u.f_tbz, insn);
                if (trans_TBZ(ctx, &u.f_tbz)) return true;
                break;
            }
            break;
        case 0x2:
            /* .10101.. ........ ........ ........ */
            switch (insn & 0x83000000u) {
            case 0x00000000:
                /* 01010100 ........ ........ ........ */
                disas_a64_extract_disas_a64_Fmt_15(ctx, &u.f_disas_a6411, insn);
                switch ((insn >> 4) & 0x1) {
                case 0x0:
                    /* 01010100 ........ ........ ...0.... */
                    /* ../target/arm/tcg/a64.decode:129 */
                    if (trans_B_cond(ctx, &u.f_disas_a6411)) return true;
                    break;
                }
                break;
            case 0x80000000u:
                /* 11010100 ........ ........ ........ */
                disas_a64_extract_i16(ctx, &u.f_i, insn);
                switch (insn & 0x00e0001f) {
                case 0x00000001:
                    /* 11010100 000..... ........ ...00001 */
                    /* ../target/arm/tcg/a64.decode:222 */
                    if (trans_SVC(ctx, &u.f_i)) return true;
                    break;
                case 0x00000002:
                    /* 11010100 000..... ........ ...00010 */
                    /* ../target/arm/tcg/a64.decode:223 */
                    if (trans_HVC(ctx, &u.f_i)) return true;
                    break;
                case 0x00000003:
                    /* 11010100 000..... ........ ...00011 */
                    /* ../target/arm/tcg/a64.decode:224 */
                    if (trans_SMC(ctx, &u.f_i)) return true;
                    break;
                case 0x00200000:
                    /* 11010100 001..... ........ ...00000 */
                    /* ../target/arm/tcg/a64.decode:225 */
                    if (trans_BRK(ctx, &u.f_i)) return true;
                    break;
                case 0x00400000:
                    /* 11010100 010..... ........ ...00000 */
                    /* ../target/arm/tcg/a64.decode:226 */
                    if (trans_HLT(ctx, &u.f_i)) return true;
                    break;
                }
                break;
            case 0x81000000u:
                /* 11010101 ........ ........ ........ */
                switch (insn & 0x00d80000) {
                case 0x00000000:
                    /* 11010101 00.00... ........ ........ */
                    switch (insn & 0x0027f01f) {
                    case 0x0000401f:
                        /* 11010101 00000000 0100.... ...11111 */
                        switch ((insn >> 5) & 0x7) {
                        case 0x0:
                            /* 11010101 00000000 0100.... 00011111 */
                            disas_a64_extract_disas_a64_Fmt_20(ctx, &u.f_disas_a6415, insn);
                            switch ((insn >> 8) & 0xf) {
                            case 0x0:
                                /* 11010101 00000000 01000000 00011111 */
                                /* ../target/arm/tcg/a64.decode:194 */
                                if (trans_CFINV(ctx, &u.f_disas_a6415)) return true;
                                break;
                            }
                            break;
                        case 0x1:
                            /* 11010101 00000000 0100.... 00111111 */
                            disas_a64_extract_disas_a64_Fmt_20(ctx, &u.f_disas_a6415, insn);
                            switch ((insn >> 8) & 0xf) {
                            case 0x0:
                                /* 11010101 00000000 01000000 00111111 */
                                /* ../target/arm/tcg/a64.decode:195 */
                                if (trans_XAFLAG(ctx, &u.f_disas_a6415)) return true;
                                break;
                            }
                            break;
                        case 0x2:
                            /* 11010101 00000000 0100.... 01011111 */
                            disas_a64_extract_disas_a64_Fmt_20(ctx, &u.f_disas_a6415, insn);
                            switch ((insn >> 8) & 0xf) {
                            case 0x0:
                                /* 11010101 00000000 01000000 01011111 */
                                /* ../target/arm/tcg/a64.decode:196 */
                                if (trans_AXFLAG(ctx, &u.f_disas_a6415)) return true;
                                break;
                            }
                            break;
                        case 0x3:
                            /* 11010101 00000000 0100.... 01111111 */
                            /* ../target/arm/tcg/a64.decode:201 */
                            disas_a64_extract_msr_i(ctx, &u.f_i, insn);
                            if (trans_MSR_i_UAO(ctx, &u.f_i)) return true;
                            break;
                        case 0x4:
                            /* 11010101 00000000 0100.... 10011111 */
                            /* ../target/arm/tcg/a64.decode:202 */
                            disas_a64_extract_msr_i(ctx, &u.f_i, insn);
                            if (trans_MSR_i_PAN(ctx, &u.f_i)) return true;
                            break;
                        case 0x5:
                            /* 11010101 00000000 0100.... 10111111 */
                            /* ../target/arm/tcg/a64.decode:203 */
                            disas_a64_extract_msr_i(ctx, &u.f_i, insn);
                            if (trans_MSR_i_SPSEL(ctx, &u.f_i)) return true;
                            break;
                        }
                        break;
                    case 0x0003201f:
                        /* 11010101 00000011 0010.... ...11111 */
                        if ((insn & 0x00000c00) == 0x00000000) {
                            /* 11010101 00000011 001000.. ...11111 */
                            disas_a64_extract_disas_a64_Fmt_20(ctx, &u.f_disas_a6415, insn);
                            switch ((insn >> 5) & 0x1f) {
                            case 0x1:
                                /* 11010101 00000011 00100000 00111111 */
                                /* ../target/arm/tcg/a64.decode:157 */
                                if (trans_YIELD(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x2:
                                /* 11010101 00000011 00100000 01011111 */
                                /* ../target/arm/tcg/a64.decode:158 */
                                if (trans_WFE(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x3:
                                /* 11010101 00000011 00100000 01111111 */
                                /* ../target/arm/tcg/a64.decode:159 */
                                if (trans_WFI(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x7:
                                /* 11010101 00000011 00100000 11111111 */
                                /* ../target/arm/tcg/a64.decode:165 */
                                if (trans_XPACLRI(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x8:
                                /* 11010101 00000011 00100001 00011111 */
                                /* ../target/arm/tcg/a64.decode:166 */
                                if (trans_PACIA1716(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0xa:
                                /* 11010101 00000011 00100001 01011111 */
                                /* ../target/arm/tcg/a64.decode:167 */
                                if (trans_PACIB1716(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0xc:
                                /* 11010101 00000011 00100001 10011111 */
                                /* ../target/arm/tcg/a64.decode:168 */
                                if (trans_AUTIA1716(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0xe:
                                /* 11010101 00000011 00100001 11011111 */
                                /* ../target/arm/tcg/a64.decode:169 */
                                if (trans_AUTIB1716(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x10:
                                /* 11010101 00000011 00100010 00011111 */
                                /* ../target/arm/tcg/a64.decode:170 */
                                if (trans_ESB(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x18:
                                /* 11010101 00000011 00100011 00011111 */
                                /* ../target/arm/tcg/a64.decode:171 */
                                if (trans_PACIAZ(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x19:
                                /* 11010101 00000011 00100011 00111111 */
                                /* ../target/arm/tcg/a64.decode:172 */
                                if (trans_PACIASP(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x1a:
                                /* 11010101 00000011 00100011 01011111 */
                                /* ../target/arm/tcg/a64.decode:173 */
                                if (trans_PACIBZ(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x1b:
                                /* 11010101 00000011 00100011 01111111 */
                                /* ../target/arm/tcg/a64.decode:174 */
                                if (trans_PACIBSP(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x1c:
                                /* 11010101 00000011 00100011 10011111 */
                                /* ../target/arm/tcg/a64.decode:175 */
                                if (trans_AUTIAZ(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x1d:
                                /* 11010101 00000011 00100011 10111111 */
                                /* ../target/arm/tcg/a64.decode:176 */
                                if (trans_AUTIASP(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x1e:
                                /* 11010101 00000011 00100011 11011111 */
                                /* ../target/arm/tcg/a64.decode:177 */
                                if (trans_AUTIBZ(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x1f:
                                /* 11010101 00000011 00100011 11111111 */
                                /* ../target/arm/tcg/a64.decode:178 */
                                if (trans_AUTIBSP(ctx, &u.f_disas_a6415)) return true;
                                break;
                            }
                        }
                        /* ../target/arm/tcg/a64.decode:182 */
                        disas_a64_extract_disas_a64_Fmt_20(ctx, &u.f_disas_a6415, insn);
                        if (trans_NOP(ctx, &u.f_disas_a6415)) return true;
                        break;
                    case 0x0003301f:
                        /* 11010101 00000011 0011.... ...11111 */
                        switch ((insn >> 6) & 0x3) {
                        case 0x1:
                            /* 11010101 00000011 0011.... 01.11111 */
                            disas_a64_extract_disas_a64_Fmt_20(ctx, &u.f_disas_a6415, insn);
                            switch ((insn >> 5) & 0x1) {
                            case 0x0:
                                /* 11010101 00000011 0011.... 01011111 */
                                /* ../target/arm/tcg/a64.decode:187 */
                                if (trans_CLREX(ctx, &u.f_disas_a6415)) return true;
                                break;
                            }
                            break;
                        case 0x2:
                            /* 11010101 00000011 0011.... 10.11111 */
                            /* ../target/arm/tcg/a64.decode:188 */
                            disas_a64_extract_disas_a64_Fmt_21(ctx, &u.f_disas_a6416, insn);
                            if (trans_DSB_DMB(ctx, &u.f_disas_a6416)) return true;
                            break;
                        case 0x3:
                            /* 11010101 00000011 0011.... 11.11111 */
                            disas_a64_extract_disas_a64_Fmt_20(ctx, &u.f_disas_a6415, insn);
                            switch ((insn >> 5) & 0x1) {
                            case 0x0:
                                /* 11010101 00000011 0011.... 11011111 */
                                /* ../target/arm/tcg/a64.decode:189 */
                                if (trans_ISB(ctx, &u.f_disas_a6415)) return true;
                                break;
                            case 0x1:
                                /* 11010101 00000011 0011.... 11111111 */
                                switch ((insn >> 8) & 0xf) {
                                case 0x0:
                                    /* 11010101 00000011 00110000 11111111 */
                                    /* ../target/arm/tcg/a64.decode:190 */
                                    if (trans_SB(ctx, &u.f_disas_a6415)) return true;
                                    break;
                                }
                                break;
                            }
                            break;
                        }
                        break;
                    case 0x0003401f:
                        /* 11010101 00000011 0100.... ...11111 */
                        switch ((insn >> 5) & 0x7) {
                        case 0x1:
                            /* 11010101 00000011 0100.... 00111111 */
                            /* ../target/arm/tcg/a64.decode:204 */
                            disas_a64_extract_msr_i(ctx, &u.f_i, insn);
                            if (trans_MSR_i_SBSS(ctx, &u.f_i)) return true;
                            break;
                        case 0x2:
                            /* 11010101 00000011 0100.... 01011111 */
                            /* ../target/arm/tcg/a64.decode:205 */
                            disas_a64_extract_msr_i(ctx, &u.f_i, insn);
                            if (trans_MSR_i_DIT(ctx, &u.f_i)) return true;
                            break;
                        case 0x3:
                            /* 11010101 00000011 0100.... 01111111 */
                            disas_a64_extract_disas_a64_Fmt_23(ctx, &u.f_disas_a6417, insn);
                            switch ((insn >> 11) & 0x1) {
                            case 0x0:
                                /* 11010101 00000011 01000... 01111111 */
                                /* ../target/arm/tcg/a64.decode:209 */
                                if (trans_MSR_i_SVCR(ctx, &u.f_disas_a6417)) return true;
                                break;
                            }
                            break;
                        case 0x4:
                            /* 11010101 00000011 0100.... 10011111 */
                            /* ../target/arm/tcg/a64.decode:206 */
                            disas_a64_extract_msr_i(ctx, &u.f_i, insn);
                            if (trans_MSR_i_TCO(ctx, &u.f_i)) return true;
                            break;
                        case 0x6:
                            /* 11010101 00000011 0100.... 11011111 */
                            /* ../target/arm/tcg/a64.decode:207 */
                            disas_a64_extract_msr_i(ctx, &u.f_i, insn);
                            if (trans_MSR_i_DAIFSET(ctx, &u.f_i)) return true;
                            break;
                        case 0x7:
                            /* 11010101 00000011 0100.... 11111111 */
                            /* ../target/arm/tcg/a64.decode:208 */
                            disas_a64_extract_msr_i(ctx, &u.f_i, insn);
                            if (trans_MSR_i_DAIFCLEAR(ctx, &u.f_i)) return true;
                            break;
                        }
                        break;
                    }
                    break;
                case 0x00080000:
                    /* 11010101 00.01... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:215 */
                    disas_a64_extract_disas_a64_Fmt_24(ctx, &u.f_disas_a6418, insn);
                    if (trans_SYS(ctx, &u.f_disas_a6418)) return true;
                    break;
                case 0x00100000:
                    /* 11010101 00.10... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:216 */
                    disas_a64_extract_disas_a64_Fmt_25(ctx, &u.f_disas_a6418, insn);
                    if (trans_SYS(ctx, &u.f_disas_a6418)) return true;
                    break;
                case 0x00180000:
                    /* 11010101 00.11... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:217 */
                    disas_a64_extract_disas_a64_Fmt_26(ctx, &u.f_disas_a6418, insn);
                    if (trans_SYS(ctx, &u.f_disas_a6418)) return true;
                    break;
                }
                break;
            case 0x82000000u:
                /* 11010110 ........ ........ ........ */
                switch (insn & 0x00fff81f) {
                case 0x001f0000:
                    /* 11010110 00011111 00000... ...00000 */
                    disas_a64_extract_disas_a64_Fmt_16(ctx, &u.f_r, insn);
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 11010110 00011111 000000.. ...00000 */
                        /* ../target/arm/tcg/a64.decode:131 */
                        if (trans_BR(ctx, &u.f_r)) return true;
                        break;
                    }
                    break;
                case 0x001f081f:
                    /* 11010110 00011111 00001... ...11111 */
                    /* ../target/arm/tcg/a64.decode:136 */
                    disas_a64_extract_disas_a64_Fmt_17(ctx, &u.f_braz, insn);
                    if (trans_BRAZ(ctx, &u.f_braz)) return true;
                    break;
                case 0x003f0000:
                    /* 11010110 00111111 00000... ...00000 */
                    disas_a64_extract_disas_a64_Fmt_16(ctx, &u.f_r, insn);
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 11010110 00111111 000000.. ...00000 */
                        /* ../target/arm/tcg/a64.decode:132 */
                        if (trans_BLR(ctx, &u.f_r)) return true;
                        break;
                    }
                    break;
                case 0x003f081f:
                    /* 11010110 00111111 00001... ...11111 */
                    /* ../target/arm/tcg/a64.decode:137 */
                    disas_a64_extract_disas_a64_Fmt_17(ctx, &u.f_braz, insn);
                    if (trans_BLRAZ(ctx, &u.f_braz)) return true;
                    break;
                case 0x005f0000:
                    /* 11010110 01011111 00000... ...00000 */
                    disas_a64_extract_disas_a64_Fmt_16(ctx, &u.f_r, insn);
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 11010110 01011111 000000.. ...00000 */
                        /* ../target/arm/tcg/a64.decode:133 */
                        if (trans_RET(ctx, &u.f_r)) return true;
                        break;
                    }
                    break;
                case 0x005f081f:
                    /* 11010110 01011111 00001... ...11111 */
                    disas_a64_extract_disas_a64_Fmt_18(ctx, &u.f_reta, insn);
                    switch ((insn >> 5) & 0x1f) {
                    case 0x1f:
                        /* 11010110 01011111 00001.11 11111111 */
                        /* ../target/arm/tcg/a64.decode:140 */
                        if (trans_RETA(ctx, &u.f_reta)) return true;
                        break;
                    }
                    break;
                case 0x009f0000:
                    /* 11010110 10011111 00000... ...00000 */
                    disas_a64_extract_disas_a64_Fmt_20(ctx, &u.f_disas_a6415, insn);
                    switch ((insn >> 5) & 0x3f) {
                    case 0x1f:
                        /* 11010110 10011111 00000011 11100000 */
                        /* ../target/arm/tcg/a64.decode:146 */
                        if (trans_ERET(ctx, &u.f_disas_a6415)) return true;
                        break;
                    }
                    break;
                case 0x009f081f:
                    /* 11010110 10011111 00001... ...11111 */
                    disas_a64_extract_disas_a64_Fmt_18(ctx, &u.f_reta, insn);
                    switch ((insn >> 5) & 0x1f) {
                    case 0x1f:
                        /* 11010110 10011111 00001.11 11111111 */
                        /* ../target/arm/tcg/a64.decode:147 */
                        if (trans_ERETA(ctx, &u.f_reta)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x83000000u:
                /* 11010111 ........ ........ ........ */
                disas_a64_extract_disas_a64_Fmt_19(ctx, &u.f_bra, insn);
                switch ((insn >> 11) & 0x1fff) {
                case 0x3e1:
                    /* 11010111 00011111 00001... ........ */
                    /* ../target/arm/tcg/a64.decode:143 */
                    if (trans_BRA(ctx, &u.f_bra)) return true;
                    break;
                case 0x7e1:
                    /* 11010111 00111111 00001... ........ */
                    /* ../target/arm/tcg/a64.decode:144 */
                    if (trans_BLRA(ctx, &u.f_bra)) return true;
                    break;
                }
                break;
            }
            break;
        }
        break;
    }
    return false;
}
